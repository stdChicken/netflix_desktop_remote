'use strict';

const session = require('express-session');
const express = require('express');
const http = require('http');
const uuid = require('uuid');

const WebSocket = require('ws');

const app = express();
const map = new Map();

//
// We need the same instance of the session parser in express and
// WebSocket server.
//
const sessionParser = session({
  saveUninitialized: false,
  secret: '$eCuRiTy',
  resave: false
});

//
// Serve static files from the 'public' folder.
//
app.use(express.static('public'));
app.use(sessionParser);

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  res.setHeader("Content-Security-Policy", "default-src 'self'; connect-src ws:; style-src 'self'");
  next();
});


app.post('/login', function (req, res) {
  //
  // "Log in" user and set userId to session.
  //
  const id = uuid.v4();

  console.log(`Updating session for user ${id}`);
  req.session.userId = id;
  res.send({ result: 'OK', message: 'Session updated' });
});

app.delete('/logout', function (request, response) {
  const ws = map.get(request.session.userId);

  console.log('Destroying session');
  request.session.destroy(function () {
    if (ws) ws.close();

    response.send({ result: 'OK', message: 'Session destroyed' });
  });
});

//
// Create HTTP server by ourselves.
//
const server = http.createServer(app);
const wss = new WebSocket.Server({ clientTracking: false, noServer: true });

server.on('upgrade', function (request, socket, head) {
  console.log('Parsing session from request...');

  try {
    sessionParser(request, {}, () => {
      if (!request.session.userId) {
        console.log('parsing session failed', request.session);
        //socket.destroy();
        //return;
      }

      console.log('Session is parsed!');

      wss.handleUpgrade(request, socket, head, function (ws) {
        wss.emit('connection', ws, request);
      });
    });
  }
  catch (err) {
    console.log(err)
  }
});

wss.on('connection', function (ws, request) {
  const userId = request.session.userId;

  map.set(userId, ws);

  ws.on('message', function (message) {
    //
    // Here we can now use session parameters.
    //
    console.log(`Received message ${message} from user ${userId}`);

    map.forEach(function (element) {
      element.send(`${message}`)
    }, this);
  });

  ws.on('close', function () {
    console.log(`Closed session with user ${userId}`);
    map.delete(userId);
  });
});


app.post('/netflix/*', function (req, res) {
  const param = req.url.split("/").slice(-1)[0];
  if([
    "pause",
    "jumpahead",
    "jumpback",
    "nextepisode",
    "skipcredits",
    "togglefullscreen",
    "togglemute"
  ].find( a => a === param )) {
    console.log("sending param", param)
    map.forEach(function (element) {
      element.send(param)
    }, this);
    res.send({ result: '200', message: 'success' });
    
  }
  else {
    console.log("ignoring command", param);
    res.send({ result: '404', message: 'unknown command' });
  }
});


//
// Start the server.
//
server.listen(8080, function () {
  console.log('Listening on http://localhost:8080');
});