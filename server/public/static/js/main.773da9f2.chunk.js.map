{"version":3,"sources":["logo.svg","FoodOption.js","MenuItemWidget.js","CustomerMenu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FoodOption","classes","this","props","selected","className","onClick","onSelected","data","React","Component","name","options","MenuItemWidget","state","foodOptions","reduce","prev","optionData","optionName","value","setState","menuHeigt","document","getElementsByClassName","scrollHeight","modificationsAreExpanded","modificationsMenuHeigth","key","list","map","str","index","setOption","item","title","description","expandModifications","bind","style","maxHeight","dataItem","renderModificationsRow","CustomerMenu","dinnerData","pizzaData","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.773da9f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n\r\n\r\n\r\nclass FoodOption extends React.Component {\r\n    render() {\r\n        const classes = \"SiteClickable MenuItemOptionMultiple\" + (this.props.selected && \" selected\" || \"\");\r\n        return <div className={classes} onClick={() => this.props.onSelected()}>\r\n            {this.props.data}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default FoodOption;\r\n","import React from \"react\";\r\n\r\n\r\nimport FoodOption from \"./FoodOption\"\r\n\r\n\r\nconst data = [\r\n    {\r\n        name: \"strength\",\r\n        options: [\"Normal\", \"Stark\", \"Extra-stark\", \"Jätte-stark\", \"Super-stark\", \"Stark++\"]\r\n    },\r\n    {\r\n        name: \"rice\",\r\n        options: [\"Ris\", \"Mindre ris\", \"Inget ris\"]\r\n    },\r\n    {\r\n        name: \"bread\",\r\n        options: [\"Bröd\", \"Extra bröd\", \"Inget bröd\"]\r\n    },\r\n];\r\n\r\nclass MenuItemWidget extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            foodOptions: data.reduce( (prev, optionData) => {\r\n                return {\r\n                    ...prev,\r\n                    [optionData.name]: optionData.options[0]\r\n                }\r\n            }, {})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    setOption(optionName, value) {\r\n        this.setState({ foodOptions: { \r\n                ...this.state.foodOptions,\r\n                [optionName]: value\r\n            }\r\n        });\r\n    }\r\n\r\n    expandModifications() {\r\n        const menuHeigt = document.getElementsByClassName(\"MenuFoodModificationMenu\")[0].scrollHeight;\r\n        this.setState({\r\n            modificationsAreExpanded: !this.state.modificationsAreExpanded,\r\n            modificationsMenuHeigth: !this.state.modificationsAreExpanded && menuHeigt + \"px\" || null\r\n        });\r\n    }\r\n\r\n    renderModificationsRow(key, list) {\r\n        return <div className=\"MenuItemOptions\">\r\n            {\r\n                list.map((str, index) =>\r\n                    <FoodOption\r\n                        data={str}\r\n                        selected={str === this.state.foodOptions[key]}\r\n                        onSelected={() => this.setOption(key, str)}\r\n                    />)\r\n            }\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        const item = this.props.data;\r\n\r\n        return <div className=\"MenuItemWidget\">\r\n            <div>\r\n                <div className=\"MenuItemTitle\">{item.title}</div>\r\n                <div className=\"DescriptionRow\">\r\n                    <div className=\"MenuItemDescription\">{item.description}</div>\r\n                    <div className={\"SiteClickable MenuItemExpandBtn\"} onClick={this.expandModifications.bind(this)}>\r\n                        <span className=\"autoMargin\">{ this.state.modificationsAreExpanded && \"X\" || \"+1\" }</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"MenuItemOptionsDiv\">\r\n            <div style={{maxHeight: this.state.modificationsMenuHeigth || \"0px\"}} className=\"MenuFoodModificationMenu\">\r\n                {data.map( (dataItem) => {\r\n                    return this.renderModificationsRow(dataItem.name, dataItem.options);\r\n                })}\r\n            </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default MenuItemWidget;\r\n","import React from \"react\";\r\n\r\nimport MenuItemWidget from \"./MenuItemWidget\"\r\n\r\n\r\nclass CustomerMenu extends React.Component {\r\n\r\n    render() {\r\n        return <div className=\"CustomerMenuList mainDiv\">\r\n            {\r\n                this.props.data && this.props.data.map( (item) =>\r\n                    <MenuItemWidget\r\n                        data={item}\r\n                    />)\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default CustomerMenu;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CustomerMenu from \"./CustomerMenu\"\n\n\n// order\n// lägg till\n// visa meny\n// välj\n// modifiera\n// spara\n// skicka order\n\nconst dinnerData = [\n    {\n        title: \"Kyckling vidaloo (vindaloo sås)\",\n        description: \"Bitar av kycklingfilé, med indisk basmati ris, indiskt bröd, sallad, curry, grädde & indiska kryddor (kan beställas stark eller medium)\"\n    },\n    {\n        title: \"Kyckling curry\",\n        description: \"Bitar av kycklingfilé, med indisk basmati ris, indiskt bröd, sallad, curry, grädde & indiska kryddor (kan beställas stark eller medium)\"\n    },\n    {\n        title: \"Kyckling masala\",\n        description: \"Bitar av kycklingfilé, med indisk basmati ris, indiskt bröd, sallad, curry, indiska kryddor, utan grädde (kan beställas stark eller medium)\"\n    },\n    {\n        title: \"Butter chicken\",\n        description: \"Kycklingfilé, med indisk basmati ris, indiskt bröd, sallad, curry, grädde & indiska kryddor (kan beställas stark eller medium)\"\n    },\n    {\n        title: \"Kyckling tikka masala\",\n        description: \"Aromatisk kryddad kycklingfilé tillagad i smaksatt kryddsås med basmati ris & sallad\"\n    },\n    {\n        title: \"Kyckling karahi\",\n        description: \"Kycklingfilé tillagad med ingefära, grön chili, tomater och paprika i en kryddig currysås, med basmati ris & sallad\"\n    },\n    {\n        title: \"Kyckling saag\",\n        description: \"Kycklingfilé, indisk sås, serveras med basmati ris, sallad och spenat\"\n    },\n    {\n        title: \"Palak panear (med eller utan grädde)\",\n        description: \"Vegetarisk indisk mat (liknande fetaost) serveras med basmati ris, sallad & spenat\"\n    },\n    {\n        title: \"Shahi panear (med grädde)\",\n        description: \"Vegetarisk indisk mat (liknande fetaost) serveras med basmati ris och sallad\"\n    }\n];\n\nconst pizzaData = [\n    {\n        title: \"Margarita\",\n        description: \"Med tomat & ost\"\n    },\n    {\n        title: \"Funghi\",\n        description: \"med tomat, ost & champinjoner\"\n    },\n    {\n        title: \"Vesuvio\",\n        description: \"med tomat, ost & skinka\"\n    },\n    {\n        title: \"Calzone\",\n        description: \"(inbakad) med tomat, ost & skinka\"\n    },\n    {\n        title: \"Capricciosa\",\n        description: \"med tomat, ost, skinka & champinjoner\"\n    },\n    {\n        title: \"Mamma Mia\",\n        description: \"tomat, ost, skinka, räkor & champinjoner\"\n    },\n    {\n        title: \"Hawaii\",\n        description: \"tomat, ost, skinka, ananas\"\n    },\n    {\n        title: \"Tropicana\",\n        description: \"tomat, ost, skinka, ananas & banan\"\n    },\n    {\n        title: \"Pescatore\",\n        description: \"tomat, ost, tonfisk & lök\"\n    },\n    {\n        title: \"Bolognese\",\n        description: \"tomat, ost & köttfärssås\"\n    },\n    {\n        title: \"Bambino\",\n        description: \"(inbakad) tomat, ost, köttfärssås & ananas\"\n    },\n    {\n        title: \"La mafia\",\n        description: \"tomat, ost, bacon, lök & paprika\"\n    },\n    {\n        title: \"Vegetariana\",\n        description: \"tomat, ost, champinjoner, lök & paprika\"\n    },\n    {\n        title: \"Cacciatore\",\n        description: \"tomat, ost, salami & paprika\"\n    }\n];\n\nfunction App() {\n    return (\n        <div>\n            <div className=\"rootBackground\"></div>\n            <CustomerMenu\n                data={[\n                    ...dinnerData,\n                    ...pizzaData\n                ]}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}